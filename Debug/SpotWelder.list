
SpotWelder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003868  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003978  08003978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d4  080039d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080039d4  080039d4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d4  080039d4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080039dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000010  080039ec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080039ec  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bab  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e28  00000000  00000000  00027be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  00029a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  0002a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001887b  00000000  00000000  0002a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009647  00000000  00000000  00043173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089adb  00000000  00000000  0004c7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec4  00000000  00000000  000d62e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003960 	.word	0x08003960

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003960 	.word	0x08003960

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_ADC1_Init+0x74>)
 800076e:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <MX_ADC1_Init+0x78>)
 8000770:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_ADC1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_ADC1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_ADC1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_ADC1_Init+0x74>)
 8000786:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800078a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_ADC1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_ADC1_Init+0x74>)
 8000794:	2201      	movs	r2, #1
 8000796:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_ADC1_Init+0x74>)
 800079a:	f001 f861 	bl	8001860 <HAL_ADC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007a4:	f000 f9ab 	bl	8000afe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80007b0:	2305      	movs	r3, #5
 80007b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_ADC1_Init+0x74>)
 80007ba:	f001 fae9 	bl	8001d90 <HAL_ADC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007c4:	f000 f99b 	bl	8000afe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000002c 	.word	0x2000002c
 80007d4:	40012400 	.word	0x40012400

080007d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <HAL_ADC_MspInit+0x6c>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d121      	bne.n	800083c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <HAL_ADC_MspInit+0x70>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a12      	ldr	r2, [pc, #72]	; (8000848 <HAL_ADC_MspInit+0x70>)
 80007fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <HAL_ADC_MspInit+0x70>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <HAL_ADC_MspInit+0x70>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <HAL_ADC_MspInit+0x70>)
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_ADC_MspInit+0x70>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0304 	and.w	r3, r3, #4
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = BANK_VOLTAGE_Pin;
 8000828:	2301      	movs	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082c:	2303      	movs	r3, #3
 800082e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BANK_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <HAL_ADC_MspInit+0x74>)
 8000838:	f001 fd22 	bl	8002280 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40012400 	.word	0x40012400
 8000848:	40021000 	.word	0x40021000
 800084c:	40010800 	.word	0x40010800

08000850 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000864:	4b3c      	ldr	r3, [pc, #240]	; (8000958 <MX_GPIO_Init+0x108>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a3b      	ldr	r2, [pc, #236]	; (8000958 <MX_GPIO_Init+0x108>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b39      	ldr	r3, [pc, #228]	; (8000958 <MX_GPIO_Init+0x108>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0310 	and.w	r3, r3, #16
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087c:	4b36      	ldr	r3, [pc, #216]	; (8000958 <MX_GPIO_Init+0x108>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a35      	ldr	r2, [pc, #212]	; (8000958 <MX_GPIO_Init+0x108>)
 8000882:	f043 0320 	orr.w	r3, r3, #32
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b33      	ldr	r3, [pc, #204]	; (8000958 <MX_GPIO_Init+0x108>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0320 	and.w	r3, r3, #32
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b30      	ldr	r3, [pc, #192]	; (8000958 <MX_GPIO_Init+0x108>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a2f      	ldr	r2, [pc, #188]	; (8000958 <MX_GPIO_Init+0x108>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <MX_GPIO_Init+0x108>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ac:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <MX_GPIO_Init+0x108>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a29      	ldr	r2, [pc, #164]	; (8000958 <MX_GPIO_Init+0x108>)
 80008b2:	f043 0308 	orr.w	r3, r3, #8
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b27      	ldr	r3, [pc, #156]	; (8000958 <MX_GPIO_Init+0x108>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|START_LED_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80008ca:	4824      	ldr	r0, [pc, #144]	; (800095c <MX_GPIO_Init+0x10c>)
 80008cc:	f001 fe73 	bl	80025b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_DISCHARGE_Pin|RELAY_CHARGE_Pin|LED_CLK_Pin|LED_DIO_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80008d6:	4822      	ldr	r0, [pc, #136]	; (8000960 <MX_GPIO_Init+0x110>)
 80008d8:	f001 fe6d 	bl	80025b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|START_LED_Pin;
 80008dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80008e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	4619      	mov	r1, r3
 80008f4:	4819      	ldr	r0, [pc, #100]	; (800095c <MX_GPIO_Init+0x10c>)
 80008f6:	f001 fcc3 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY_DISCHARGE_Pin|RELAY_CHARGE_Pin;
 80008fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	4813      	ldr	r0, [pc, #76]	; (8000960 <MX_GPIO_Init+0x110>)
 8000914:	f001 fcb4 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|FOOTSW_Pin|BUTTON3_Pin;
 8000918:	23f0      	movs	r3, #240	; 0xf0
 800091a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_GPIO_Init+0x110>)
 800092c:	f001 fca8 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_CLK_Pin|LED_DIO_Pin;
 8000930:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000936:	2311      	movs	r3, #17
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_GPIO_Init+0x110>)
 800094a:	f001 fc99 	bl	8002280 <HAL_GPIO_Init>

}
 800094e:	bf00      	nop
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000
 800095c:	40011000 	.word	0x40011000
 8000960:	40010c00 	.word	0x40010c00

08000964 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	683a      	ldr	r2, [r7, #0]
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr

0800097e <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	f043 0202 	orr.w	r2, r3, #2
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	60da      	str	r2, [r3, #12]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
	...

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c0:	f000 fec8 	bl	8001754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c4:	f000 f840 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c8:	f7ff ff42 	bl	8000850 <MX_GPIO_Init>
  MX_TIM1_Init();
 80009cc:	f000 fdf2 	bl	80015b4 <MX_TIM1_Init>
  MX_ADC1_Init();
 80009d0:	f7ff fec4 	bl	800075c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //DISABLE CHARGING,ENABLE DISCHARGE
  HAL_GPIO_WritePin(RELAY_CHARGE_GPIO_Port, RELAY_CHARGE_Pin,GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009da:	4817      	ldr	r0, [pc, #92]	; (8000a38 <main+0x7c>)
 80009dc:	f001 fdeb 	bl	80025b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY_DISCHARGE_GPIO_Port, RELAY_DISCHARGE_Pin,GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e6:	4814      	ldr	r0, [pc, #80]	; (8000a38 <main+0x7c>)
 80009e8:	f001 fde5 	bl	80025b6 <HAL_GPIO_WritePin>

  tm1637SetBrightness(7);
 80009ec:	2007      	movs	r0, #7
 80009ee:	f000 f8f9 	bl	8000be4 <tm1637SetBrightness>
  tm1637DisplayDecimal(3333, 0);
 80009f2:	2100      	movs	r1, #0
 80009f4:	f640 5005 	movw	r0, #3333	; 0xd05
 80009f8:	f000 f886 	bl	8000b08 <tm1637DisplayDecimal>

  LL_TIM_OC_SetCompareCH1(TIM1,PulseTime_ms*100);
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <main+0x80>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2264      	movs	r2, #100	; 0x64
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	4619      	mov	r1, r3
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <main+0x84>)
 8000a0a:	f7ff ffab 	bl	8000964 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_EnableAllOutputs(TIM1); //MOE bit
 8000a0e:	480c      	ldr	r0, [pc, #48]	; (8000a40 <main+0x84>)
 8000a10:	f7ff ffb5 	bl	800097e <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableIT_CC1(TIM1);
 8000a14:	480a      	ldr	r0, [pc, #40]	; (8000a40 <main+0x84>)
 8000a16:	f7ff ffc1 	bl	800099c <LL_TIM_EnableIT_CC1>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	tm1637DisplayDecimal(PulseTime_ms, 0);
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <main+0x80>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 f871 	bl	8000b08 <tm1637DisplayDecimal>

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	4806      	ldr	r0, [pc, #24]	; (8000a44 <main+0x88>)
 8000a2c:	f001 fddb 	bl	80025e6 <HAL_GPIO_TogglePin>

	HAL_Delay(10);
 8000a30:	200a      	movs	r0, #10
 8000a32:	f000 fef1 	bl	8001818 <HAL_Delay>
	tm1637DisplayDecimal(PulseTime_ms, 0);
 8000a36:	e7f0      	b.n	8000a1a <main+0x5e>
 8000a38:	40010c00 	.word	0x40010c00
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	40012c00 	.word	0x40012c00
 8000a44:	40011000 	.word	0x40011000

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	; 0x50
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a52:	2228      	movs	r2, #40	; 0x28
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 ff7a 	bl	8003950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a86:	2301      	movs	r3, #1
 8000a88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a94:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fdba 	bl	8002618 <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000aaa:	f000 f828 	bl	8000afe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	230f      	movs	r3, #15
 8000ab0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000abe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 f826 	bl	8002b1c <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ad6:	f000 f812 	bl	8000afe <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ada:	2302      	movs	r3, #2
 8000adc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ae2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 f99c 	bl	8002e24 <HAL_RCCEx_PeriphCLKConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000af2:	f000 f804 	bl	8000afe <Error_Handler>
  }
}
 8000af6:	bf00      	nop
 8000af8:	3750      	adds	r7, #80	; 0x50
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b02:	b672      	cpsid	i
}
 8000b04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <Error_Handler+0x8>

08000b08 <tm1637DisplayDecimal>:
    0x00
};


void tm1637DisplayDecimal(int v, int displaySeparator)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	e032      	b.n	8000b7e <tm1637DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	4b30      	ldr	r3, [pc, #192]	; (8000bdc <tm1637DisplayDecimal+0xd4>)
 8000b1c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b20:	109a      	asrs	r2, r3, #2
 8000b22:	17cb      	asrs	r3, r1, #31
 8000b24:	1ad2      	subs	r2, r2, r3
 8000b26:	4613      	mov	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	1aca      	subs	r2, r1, r3
 8000b30:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <tm1637DisplayDecimal+0xd8>)
 8000b32:	5c99      	ldrb	r1, [r3, r2]
 8000b34:	f107 020c 	add.w	r2, r7, #12
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d110      	bne.n	8000b68 <tm1637DisplayDecimal+0x60>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00d      	beq.n	8000b68 <tm1637DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 8000b4c:	f107 020c 	add.w	r2, r7, #12
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	4413      	add	r3, r2
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b5a:	b2d9      	uxtb	r1, r3
 8000b5c:	f107 020c 	add.w	r2, r7, #12
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	4413      	add	r3, r2
 8000b64:	460a      	mov	r2, r1
 8000b66:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <tm1637DisplayDecimal+0xd4>)
 8000b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b70:	1092      	asrs	r2, r2, #2
 8000b72:	17db      	asrs	r3, r3, #31
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	ddc9      	ble.n	8000b18 <tm1637DisplayDecimal+0x10>
    }

    _tm1637Start();
 8000b84:	f000 f843 	bl	8000c0e <_tm1637Start>
    _tm1637WriteByte(0x40);
 8000b88:	2040      	movs	r0, #64	; 0x40
 8000b8a:	f000 f872 	bl	8000c72 <_tm1637WriteByte>
    _tm1637ReadResult();
 8000b8e:	f000 f860 	bl	8000c52 <_tm1637ReadResult>
    _tm1637Stop();
 8000b92:	f000 f849 	bl	8000c28 <_tm1637Stop>

    _tm1637Start();
 8000b96:	f000 f83a 	bl	8000c0e <_tm1637Start>
    _tm1637WriteByte(0xc0);
 8000b9a:	20c0      	movs	r0, #192	; 0xc0
 8000b9c:	f000 f869 	bl	8000c72 <_tm1637WriteByte>
    _tm1637ReadResult();
 8000ba0:	f000 f857 	bl	8000c52 <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	e00e      	b.n	8000bc8 <tm1637DisplayDecimal+0xc0>
        _tm1637WriteByte(digitArr[3 - i]);
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	f1c3 0303 	rsb	r3, r3, #3
 8000bb0:	3318      	adds	r3, #24
 8000bb2:	443b      	add	r3, r7
 8000bb4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f85a 	bl	8000c72 <_tm1637WriteByte>
        _tm1637ReadResult();
 8000bbe:	f000 f848 	bl	8000c52 <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	dded      	ble.n	8000baa <tm1637DisplayDecimal+0xa2>
    }

    _tm1637Stop();
 8000bce:	f000 f82b 	bl	8000c28 <_tm1637Stop>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	66666667 	.word	0x66666667
 8000be0:	08003998 	.word	0x08003998

08000be4 <tm1637SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void tm1637SetBrightness(char brightness)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    _tm1637Start();
 8000bee:	f000 f80e 	bl	8000c0e <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	3b79      	subs	r3, #121	; 0x79
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f83a 	bl	8000c72 <_tm1637WriteByte>
    _tm1637ReadResult();
 8000bfe:	f000 f828 	bl	8000c52 <_tm1637ReadResult>
    _tm1637Stop();
 8000c02:	f000 f811 	bl	8000c28 <_tm1637Stop>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <_tm1637Start>:

void _tm1637Start(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
    _tm1637ClkHigh();
 8000c12:	f000 f873 	bl	8000cfc <_tm1637ClkHigh>
    _tm1637DioHigh();
 8000c16:	f000 f889 	bl	8000d2c <_tm1637DioHigh>
    _tm1637DelayUsec(COMM_DELAY);
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f000 f853 	bl	8000cc6 <_tm1637DelayUsec>
    _tm1637DioLow();
 8000c20:	f000 f890 	bl	8000d44 <_tm1637DioLow>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_tm1637Stop>:

void _tm1637Stop(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8000c2c:	f000 f872 	bl	8000d14 <_tm1637ClkLow>
    _tm1637DelayUsec(COMM_DELAY);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f000 f848 	bl	8000cc6 <_tm1637DelayUsec>
    _tm1637DioLow();
 8000c36:	f000 f885 	bl	8000d44 <_tm1637DioLow>
    _tm1637DelayUsec(COMM_DELAY);
 8000c3a:	200a      	movs	r0, #10
 8000c3c:	f000 f843 	bl	8000cc6 <_tm1637DelayUsec>
    _tm1637ClkHigh();
 8000c40:	f000 f85c 	bl	8000cfc <_tm1637ClkHigh>
    _tm1637DelayUsec(COMM_DELAY);
 8000c44:	200a      	movs	r0, #10
 8000c46:	f000 f83e 	bl	8000cc6 <_tm1637DelayUsec>
    _tm1637DioHigh();
 8000c4a:	f000 f86f 	bl	8000d2c <_tm1637DioHigh>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_tm1637ReadResult>:

void _tm1637ReadResult(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8000c56:	f000 f85d 	bl	8000d14 <_tm1637ClkLow>
    _tm1637DelayUsec(COMM_DELAY);
 8000c5a:	200a      	movs	r0, #10
 8000c5c:	f000 f833 	bl	8000cc6 <_tm1637DelayUsec>
    // while (dio); // We're cheating here and not actually reading back the response.
    _tm1637ClkHigh();
 8000c60:	f000 f84c 	bl	8000cfc <_tm1637ClkHigh>
    _tm1637DelayUsec(COMM_DELAY);
 8000c64:	200a      	movs	r0, #10
 8000c66:	f000 f82e 	bl	8000cc6 <_tm1637DelayUsec>
    _tm1637ClkLow();
 8000c6a:	f000 f853 	bl	8000d14 <_tm1637ClkLow>
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_tm1637WriteByte>:

void _tm1637WriteByte(unsigned char b)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b084      	sub	sp, #16
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; ++i) {
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	e019      	b.n	8000cb6 <_tm1637WriteByte+0x44>
        _tm1637ClkLow();
 8000c82:	f000 f847 	bl	8000d14 <_tm1637ClkLow>
        if (b & 0x01) {
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <_tm1637WriteByte+0x24>
            _tm1637DioHigh();
 8000c90:	f000 f84c 	bl	8000d2c <_tm1637DioHigh>
 8000c94:	e001      	b.n	8000c9a <_tm1637WriteByte+0x28>
        }
        else {
            _tm1637DioLow();
 8000c96:	f000 f855 	bl	8000d44 <_tm1637DioLow>
        }
        _tm1637DelayUsec(COMM_DELAY);
 8000c9a:	200a      	movs	r0, #10
 8000c9c:	f000 f813 	bl	8000cc6 <_tm1637DelayUsec>
        b >>= 1;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	085b      	lsrs	r3, r3, #1
 8000ca4:	71fb      	strb	r3, [r7, #7]
        _tm1637ClkHigh();
 8000ca6:	f000 f829 	bl	8000cfc <_tm1637ClkHigh>
        _tm1637DelayUsec(COMM_DELAY);
 8000caa:	200a      	movs	r0, #10
 8000cac:	f000 f80b 	bl	8000cc6 <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2b07      	cmp	r3, #7
 8000cba:	dde2      	ble.n	8000c82 <_tm1637WriteByte+0x10>
    }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_tm1637DelayUsec>:

void _tm1637DelayUsec(unsigned int i)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 8000cce:	e00c      	b.n	8000cea <_tm1637DelayUsec+0x24>
        for (int j = 0; j < 10; ++j) {
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	e003      	b.n	8000cde <_tm1637DelayUsec+0x18>
            __asm__ __volatile__("nop\n\t":::"memory");
 8000cd6:	bf00      	nop
        for (int j = 0; j < 10; ++j) {
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2b09      	cmp	r3, #9
 8000ce2:	ddf8      	ble.n	8000cd6 <_tm1637DelayUsec+0x10>
    for (; i>0; i--) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1ef      	bne.n	8000cd0 <_tm1637DelayUsec+0xa>
        }
    }
}
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d06:	4802      	ldr	r0, [pc, #8]	; (8000d10 <_tm1637ClkHigh+0x14>)
 8000d08:	f001 fc55 	bl	80025b6 <HAL_GPIO_WritePin>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40010c00 	.word	0x40010c00

08000d14 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d1e:	4802      	ldr	r0, [pc, #8]	; (8000d28 <_tm1637ClkLow+0x14>)
 8000d20:	f001 fc49 	bl	80025b6 <HAL_GPIO_WritePin>
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40010c00 	.word	0x40010c00

08000d2c <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_DIO_GPIO_Port, LED_DIO_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d36:	4802      	ldr	r0, [pc, #8]	; (8000d40 <_tm1637DioHigh+0x14>)
 8000d38:	f001 fc3d 	bl	80025b6 <HAL_GPIO_WritePin>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40010c00 	.word	0x40010c00

08000d44 <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_DIO_GPIO_Port, LED_DIO_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4e:	4802      	ldr	r0, [pc, #8]	; (8000d58 <_tm1637DioLow+0x14>)
 8000d50:	f001 fc31 	bl	80025b6 <HAL_GPIO_WritePin>
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40010c00 	.word	0x40010c00

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6193      	str	r3, [r2, #24]
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	61d3      	str	r3, [r2, #28]
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_MspInit+0x60>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_MspInit+0x60>)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010000 	.word	0x40010000

08000dc0 <LL_TIM_EnableCounter>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f043 0201 	orr.w	r2, r3, #1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <LL_TIM_CC_EnableChannel>:
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a1a      	ldr	r2, [r3, #32]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	621a      	str	r2, [r3, #32]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <LL_TIM_CC_DisableChannel>:
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a1a      	ldr	r2, [r3, #32]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	401a      	ands	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	621a      	str	r2, [r3, #32]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <LL_TIM_OC_SetCompareCH1>:
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <LL_TIM_ClearFlag_CC1>:
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f06f 0202 	mvn.w	r2, #2
 8000e48:	611a      	str	r2, [r3, #16]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 fca0 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  //Bank voltage---------------------------------------------------------------------
  HAL_ADC_Start(&hadc1);
 8000ea0:	4881      	ldr	r0, [pc, #516]	; (80010a8 <SysTick_Handler+0x210>)
 8000ea2:	f000 fdb5 	bl	8001a10 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,10);
 8000ea6:	210a      	movs	r1, #10
 8000ea8:	487f      	ldr	r0, [pc, #508]	; (80010a8 <SysTick_Handler+0x210>)
 8000eaa:	f000 fe5f 	bl	8001b6c <HAL_ADC_PollForConversion>
  Bank_mV=HAL_ADC_GetValue(&hadc1)*ADC_TO_mV;
 8000eae:	487e      	ldr	r0, [pc, #504]	; (80010a8 <SysTick_Handler+0x210>)
 8000eb0:	f000 ff62 	bl	8001d78 <HAL_ADC_GetValue>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fbb6 	bl	8000628 <__aeabi_ui2d>
 8000ebc:	a378      	add	r3, pc, #480	; (adr r3, 80010a0 <SysTick_Handler+0x208>)
 8000ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec2:	f7ff f945 	bl	8000150 <__aeabi_dmul>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f7ff fc25 	bl	800071c <__aeabi_d2uiz>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a75      	ldr	r2, [pc, #468]	; (80010ac <SysTick_Handler+0x214>)
 8000ed6:	6013      	str	r3, [r2, #0]

  if(Bank_mV > BANK_MAX_mV)
 8000ed8:	4b74      	ldr	r3, [pc, #464]	; (80010ac <SysTick_Handler+0x214>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d90e      	bls.n	8000f02 <SysTick_Handler+0x6a>
  {
	  ChargeControl=0;
 8000ee4:	4b72      	ldr	r3, [pc, #456]	; (80010b0 <SysTick_Handler+0x218>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(RELAY_CHARGE_GPIO_Port, RELAY_CHARGE_Pin,GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef0:	4870      	ldr	r0, [pc, #448]	; (80010b4 <SysTick_Handler+0x21c>)
 8000ef2:	f001 fb60 	bl	80025b6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RELAY_DISCHARGE_GPIO_Port, RELAY_DISCHARGE_Pin,GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efc:	486d      	ldr	r0, [pc, #436]	; (80010b4 <SysTick_Handler+0x21c>)
 8000efe:	f001 fb5a 	bl	80025b6 <HAL_GPIO_WritePin>
  }
  //----------------------------------------------------------------------------------

  //Get Current Values
  TPlusStatus=!HAL_GPIO_ReadPin(BUTTON1_GPIO_Port,BUTTON1_Pin);
 8000f02:	2110      	movs	r1, #16
 8000f04:	486b      	ldr	r0, [pc, #428]	; (80010b4 <SysTick_Handler+0x21c>)
 8000f06:	f001 fb3f 	bl	8002588 <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf0c      	ite	eq
 8000f10:	2301      	moveq	r3, #1
 8000f12:	2300      	movne	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b67      	ldr	r3, [pc, #412]	; (80010b8 <SysTick_Handler+0x220>)
 8000f1a:	601a      	str	r2, [r3, #0]
  TMinusStatus=!HAL_GPIO_ReadPin(BUTTON2_GPIO_Port,BUTTON2_Pin);
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	4865      	ldr	r0, [pc, #404]	; (80010b4 <SysTick_Handler+0x21c>)
 8000f20:	f001 fb32 	bl	8002588 <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	bf0c      	ite	eq
 8000f2a:	2301      	moveq	r3, #1
 8000f2c:	2300      	movne	r3, #0
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b62      	ldr	r3, [pc, #392]	; (80010bc <SysTick_Handler+0x224>)
 8000f34:	601a      	str	r2, [r3, #0]
  TChargeStatus=!HAL_GPIO_ReadPin(BUTTON3_GPIO_Port,BUTTON3_Pin);
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	485e      	ldr	r0, [pc, #376]	; (80010b4 <SysTick_Handler+0x21c>)
 8000f3a:	f001 fb25 	bl	8002588 <HAL_GPIO_ReadPin>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	bf0c      	ite	eq
 8000f44:	2301      	moveq	r3, #1
 8000f46:	2300      	movne	r3, #0
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b5c      	ldr	r3, [pc, #368]	; (80010c0 <SysTick_Handler+0x228>)
 8000f4e:	601a      	str	r2, [r3, #0]
  Footsw_Status=!HAL_GPIO_ReadPin(FOOTSW_GPIO_Port,FOOTSW_Pin);
 8000f50:	2140      	movs	r1, #64	; 0x40
 8000f52:	4858      	ldr	r0, [pc, #352]	; (80010b4 <SysTick_Handler+0x21c>)
 8000f54:	f001 fb18 	bl	8002588 <HAL_GPIO_ReadPin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bf0c      	ite	eq
 8000f5e:	2301      	moveq	r3, #1
 8000f60:	2300      	movne	r3, #0
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b57      	ldr	r3, [pc, #348]	; (80010c4 <SysTick_Handler+0x22c>)
 8000f68:	601a      	str	r2, [r3, #0]

  //Save Values from previus loop
  TPlusStatusDebounceHIST=TPlusStatusDebounce;
 8000f6a:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <SysTick_Handler+0x230>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a57      	ldr	r2, [pc, #348]	; (80010cc <SysTick_Handler+0x234>)
 8000f70:	6013      	str	r3, [r2, #0]
  TMinusStatusDebounceHIST=TMinusStatusDebounce;
 8000f72:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <SysTick_Handler+0x238>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <SysTick_Handler+0x23c>)
 8000f78:	6013      	str	r3, [r2, #0]
  TChargeStatusDebounceHIST=TChargeStatusDebounce;
 8000f7a:	4b57      	ldr	r3, [pc, #348]	; (80010d8 <SysTick_Handler+0x240>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a57      	ldr	r2, [pc, #348]	; (80010dc <SysTick_Handler+0x244>)
 8000f80:	6013      	str	r3, [r2, #0]
  FootswStatus_DebounceHIST=FootswStatus_Debounce;
 8000f82:	4b57      	ldr	r3, [pc, #348]	; (80010e0 <SysTick_Handler+0x248>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a57      	ldr	r2, [pc, #348]	; (80010e4 <SysTick_Handler+0x24c>)
 8000f88:	6013      	str	r3, [r2, #0]

  // Debounce Button ++ Button -------------
  if(TPlusStatus==1)
 8000f8a:	4b4b      	ldr	r3, [pc, #300]	; (80010b8 <SysTick_Handler+0x220>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d105      	bne.n	8000f9e <SysTick_Handler+0x106>
  {
	  TPlusCount++;
 8000f92:	4b55      	ldr	r3, [pc, #340]	; (80010e8 <SysTick_Handler+0x250>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	4a53      	ldr	r2, [pc, #332]	; (80010e8 <SysTick_Handler+0x250>)
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	e005      	b.n	8000faa <SysTick_Handler+0x112>
  }
  else
  {
	  TPlusCount=0;
 8000f9e:	4b52      	ldr	r3, [pc, #328]	; (80010e8 <SysTick_Handler+0x250>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
	  TPlusStatusDebounce=0;
 8000fa4:	4b48      	ldr	r3, [pc, #288]	; (80010c8 <SysTick_Handler+0x230>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
  }
  if(TPlusCount==BUTTONTHRESHOLD)
 8000faa:	4b4f      	ldr	r3, [pc, #316]	; (80010e8 <SysTick_Handler+0x250>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b0a      	cmp	r3, #10
 8000fb0:	d102      	bne.n	8000fb8 <SysTick_Handler+0x120>
  {
	  TPlusStatusDebounce=1;
 8000fb2:	4b45      	ldr	r3, [pc, #276]	; (80010c8 <SysTick_Handler+0x230>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
  }
  //-----------------------------------------

  // Debounce -- Button ---------------------
  if(TMinusStatus==1)
 8000fb8:	4b40      	ldr	r3, [pc, #256]	; (80010bc <SysTick_Handler+0x224>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d105      	bne.n	8000fcc <SysTick_Handler+0x134>
  {
	  TMinusCount++;
 8000fc0:	4b4a      	ldr	r3, [pc, #296]	; (80010ec <SysTick_Handler+0x254>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4a49      	ldr	r2, [pc, #292]	; (80010ec <SysTick_Handler+0x254>)
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e005      	b.n	8000fd8 <SysTick_Handler+0x140>
  }
  else
  {
	  TMinusCount=0;
 8000fcc:	4b47      	ldr	r3, [pc, #284]	; (80010ec <SysTick_Handler+0x254>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
	  TMinusStatusDebounce=0;
 8000fd2:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <SysTick_Handler+0x238>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
  }
  if(TMinusCount==BUTTONTHRESHOLD)
 8000fd8:	4b44      	ldr	r3, [pc, #272]	; (80010ec <SysTick_Handler+0x254>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b0a      	cmp	r3, #10
 8000fde:	d102      	bne.n	8000fe6 <SysTick_Handler+0x14e>
  {
	  TMinusStatusDebounce=1;
 8000fe0:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <SysTick_Handler+0x238>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
  }
  //-----------------------------------------

  // Debounce Charge Button ---------------------
  if(TChargeStatus==1)
 8000fe6:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <SysTick_Handler+0x228>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d105      	bne.n	8000ffa <SysTick_Handler+0x162>
  {
	  TChargeCount++;
 8000fee:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <SysTick_Handler+0x258>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a3e      	ldr	r2, [pc, #248]	; (80010f0 <SysTick_Handler+0x258>)
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	e005      	b.n	8001006 <SysTick_Handler+0x16e>
  }
  else
  {
	  TChargeCount=0;
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <SysTick_Handler+0x258>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
	  TChargeStatusDebounce=0;
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <SysTick_Handler+0x240>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
  }
  if(TChargeCount==BUTTONTHRESHOLD)
 8001006:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <SysTick_Handler+0x258>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b0a      	cmp	r3, #10
 800100c:	d102      	bne.n	8001014 <SysTick_Handler+0x17c>
  {
	  TChargeStatusDebounce=1;
 800100e:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <SysTick_Handler+0x240>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
  }
  //-----------------------------------------

  // Debounce Footswitch --------------------
  if(Footsw_Status==1)
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <SysTick_Handler+0x22c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d105      	bne.n	8001028 <SysTick_Handler+0x190>
  {
	  FootswCount++;
 800101c:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <SysTick_Handler+0x25c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	4a34      	ldr	r2, [pc, #208]	; (80010f4 <SysTick_Handler+0x25c>)
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e005      	b.n	8001034 <SysTick_Handler+0x19c>
  }
  else
  {
	  FootswCount=0;
 8001028:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <SysTick_Handler+0x25c>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
	  FootswStatus_Debounce=0;
 800102e:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <SysTick_Handler+0x248>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
  }
  if(FootswCount==BUTTONTHRESHOLD)
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <SysTick_Handler+0x25c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b0a      	cmp	r3, #10
 800103a:	d102      	bne.n	8001042 <SysTick_Handler+0x1aa>
  {
	  FootswStatus_Debounce=1;
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <SysTick_Handler+0x248>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]
  }
  //------------------------------------------

  // Charge Button Event
  if(TChargeStatusDebounceHIST!=TChargeStatusDebounce && TChargeStatusDebounce==1)
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <SysTick_Handler+0x244>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <SysTick_Handler+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	d060      	beq.n	8001110 <SysTick_Handler+0x278>
 800104e:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <SysTick_Handler+0x240>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d15c      	bne.n	8001110 <SysTick_Handler+0x278>
  {
	  if(Bank_mV > BANK_MAX_mV)ChargeControl=0;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <SysTick_Handler+0x214>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f641 3258 	movw	r2, #7000	; 0x1b58
 800105e:	4293      	cmp	r3, r2
 8001060:	d903      	bls.n	800106a <SysTick_Handler+0x1d2>
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <SysTick_Handler+0x218>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	e009      	b.n	800107e <SysTick_Handler+0x1e6>
	  else ChargeControl=!ChargeControl;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <SysTick_Handler+0x218>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf0c      	ite	eq
 8001072:	2301      	moveq	r3, #1
 8001074:	2300      	movne	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	461a      	mov	r2, r3
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <SysTick_Handler+0x218>)
 800107c:	601a      	str	r2, [r3, #0]

	  if(ChargeControl)
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <SysTick_Handler+0x218>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d038      	beq.n	80010f8 <SysTick_Handler+0x260>
	  {
		  HAL_GPIO_WritePin(RELAY_CHARGE_GPIO_Port, RELAY_CHARGE_Pin,GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <SysTick_Handler+0x21c>)
 800108e:	f001 fa92 	bl	80025b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RELAY_DISCHARGE_GPIO_Port, RELAY_DISCHARGE_Pin,GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001098:	4806      	ldr	r0, [pc, #24]	; (80010b4 <SysTick_Handler+0x21c>)
 800109a:	f001 fa8c 	bl	80025b6 <HAL_GPIO_WritePin>
 800109e:	e037      	b.n	8001110 <SysTick_Handler+0x278>
 80010a0:	9999999a 	.word	0x9999999a
 80010a4:	40099999 	.word	0x40099999
 80010a8:	2000002c 	.word	0x2000002c
 80010ac:	200000a8 	.word	0x200000a8
 80010b0:	200000a4 	.word	0x200000a4
 80010b4:	40010c00 	.word	0x40010c00
 80010b8:	2000005c 	.word	0x2000005c
 80010bc:	20000060 	.word	0x20000060
 80010c0:	20000068 	.word	0x20000068
 80010c4:	20000064 	.word	0x20000064
 80010c8:	2000006c 	.word	0x2000006c
 80010cc:	2000007c 	.word	0x2000007c
 80010d0:	20000070 	.word	0x20000070
 80010d4:	20000080 	.word	0x20000080
 80010d8:	20000078 	.word	0x20000078
 80010dc:	20000088 	.word	0x20000088
 80010e0:	20000074 	.word	0x20000074
 80010e4:	20000084 	.word	0x20000084
 80010e8:	2000008c 	.word	0x2000008c
 80010ec:	20000090 	.word	0x20000090
 80010f0:	20000098 	.word	0x20000098
 80010f4:	20000094 	.word	0x20000094
	  }
	  else
	  {
		  HAL_GPIO_WritePin(RELAY_CHARGE_GPIO_Port, RELAY_CHARGE_Pin,GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fe:	4840      	ldr	r0, [pc, #256]	; (8001200 <SysTick_Handler+0x368>)
 8001100:	f001 fa59 	bl	80025b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RELAY_DISCHARGE_GPIO_Port, RELAY_DISCHARGE_Pin,GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110a:	483d      	ldr	r0, [pc, #244]	; (8001200 <SysTick_Handler+0x368>)
 800110c:	f001 fa53 	bl	80025b6 <HAL_GPIO_WritePin>
	  }
  }

  //++ Button Event
  if(TPlusStatusDebounceHIST!=TPlusStatusDebounce && TPlusStatusDebounce==1)
 8001110:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <SysTick_Handler+0x36c>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <SysTick_Handler+0x370>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d01a      	beq.n	8001152 <SysTick_Handler+0x2ba>
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <SysTick_Handler+0x370>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d116      	bne.n	8001152 <SysTick_Handler+0x2ba>
  {
	  PulseTime_ms++;
 8001124:	4b39      	ldr	r3, [pc, #228]	; (800120c <SysTick_Handler+0x374>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a38      	ldr	r2, [pc, #224]	; (800120c <SysTick_Handler+0x374>)
 800112c:	6013      	str	r3, [r2, #0]
	  if(PulseTime_ms>=MAX_PULSE_LENGTH)PulseTime_ms=MAX_PULSE_LENGTH;
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <SysTick_Handler+0x374>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001136:	d303      	bcc.n	8001140 <SysTick_Handler+0x2a8>
 8001138:	4b34      	ldr	r3, [pc, #208]	; (800120c <SysTick_Handler+0x374>)
 800113a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800113e:	601a      	str	r2, [r3, #0]
	  LL_TIM_OC_SetCompareCH1(TIM1, PulseTime_ms*100);
 8001140:	4b32      	ldr	r3, [pc, #200]	; (800120c <SysTick_Handler+0x374>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2264      	movs	r2, #100	; 0x64
 8001146:	fb02 f303 	mul.w	r3, r2, r3
 800114a:	4619      	mov	r1, r3
 800114c:	4830      	ldr	r0, [pc, #192]	; (8001210 <SysTick_Handler+0x378>)
 800114e:	f7ff fe67 	bl	8000e20 <LL_TIM_OC_SetCompareCH1>
  }

  //-- Button Event
  if(TMinusStatusDebounceHIST!=TMinusStatusDebounce && TMinusStatusDebounce==1)
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <SysTick_Handler+0x37c>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b30      	ldr	r3, [pc, #192]	; (8001218 <SysTick_Handler+0x380>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d018      	beq.n	8001190 <SysTick_Handler+0x2f8>
 800115e:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <SysTick_Handler+0x380>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d114      	bne.n	8001190 <SysTick_Handler+0x2f8>
  {
	  PulseTime_ms--;
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <SysTick_Handler+0x374>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a27      	ldr	r2, [pc, #156]	; (800120c <SysTick_Handler+0x374>)
 800116e:	6013      	str	r3, [r2, #0]
	  if(PulseTime_ms<=MIN_PULSE_LENGTH)PulseTime_ms=MIN_PULSE_LENGTH;
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <SysTick_Handler+0x374>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d802      	bhi.n	800117e <SysTick_Handler+0x2e6>
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <SysTick_Handler+0x374>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
	  LL_TIM_OC_SetCompareCH1(TIM1, PulseTime_ms*100);
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <SysTick_Handler+0x374>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2264      	movs	r2, #100	; 0x64
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	4619      	mov	r1, r3
 800118a:	4821      	ldr	r0, [pc, #132]	; (8001210 <SysTick_Handler+0x378>)
 800118c:	f7ff fe48 	bl	8000e20 <LL_TIM_OC_SetCompareCH1>
  }

  //Footswitch Event
  if(FootswStatus_DebounceHIST!=FootswStatus_Debounce && FootswStatus_Debounce==1)
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <SysTick_Handler+0x384>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <SysTick_Handler+0x388>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d00c      	beq.n	80011b6 <SysTick_Handler+0x31e>
 800119c:	4b20      	ldr	r3, [pc, #128]	; (8001220 <SysTick_Handler+0x388>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d108      	bne.n	80011b6 <SysTick_Handler+0x31e>
  {
	  //Check if Bank OK
	  //Start Pulse
	  HAL_GPIO_WritePin(START_LED_GPIO_Port, START_LED_Pin,GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011aa:	481e      	ldr	r0, [pc, #120]	; (8001224 <SysTick_Handler+0x38c>)
 80011ac:	f001 fa03 	bl	80025b6 <HAL_GPIO_WritePin>
	  PulseActive=1;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <SysTick_Handler+0x390>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
  }

  //WHEN PULSE IS ACTIVE FLASH LED-------------------------------------
  if(PulseActive)PulseActiveCnt++;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <SysTick_Handler+0x390>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d004      	beq.n	80011c8 <SysTick_Handler+0x330>
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <SysTick_Handler+0x394>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	4a19      	ldr	r2, [pc, #100]	; (800122c <SysTick_Handler+0x394>)
 80011c6:	6013      	str	r3, [r2, #0]
  if(PulseActiveCnt >= PULSE_LED_TIME )
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <SysTick_Handler+0x394>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d912      	bls.n	80011fa <SysTick_Handler+0x362>
  {
	  PulseActive=0;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <SysTick_Handler+0x390>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
	  PulseActiveCnt=0;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <SysTick_Handler+0x394>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(START_LED_GPIO_Port, START_LED_Pin,GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e6:	480f      	ldr	r0, [pc, #60]	; (8001224 <SysTick_Handler+0x38c>)
 80011e8:	f001 f9e5 	bl	80025b6 <HAL_GPIO_WritePin>

	  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 80011ec:	2101      	movs	r1, #1
 80011ee:	4808      	ldr	r0, [pc, #32]	; (8001210 <SysTick_Handler+0x378>)
 80011f0:	f7ff fdf5 	bl	8000dde <LL_TIM_CC_EnableChannel>
	  LL_TIM_EnableCounter(TIM1);
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <SysTick_Handler+0x378>)
 80011f6:	f7ff fde3 	bl	8000dc0 <LL_TIM_EnableCounter>
  }
  //--------------------------------------------------------------------


  /* USER CODE END SysTick_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40010c00 	.word	0x40010c00
 8001204:	2000007c 	.word	0x2000007c
 8001208:	2000006c 	.word	0x2000006c
 800120c:	20000000 	.word	0x20000000
 8001210:	40012c00 	.word	0x40012c00
 8001214:	20000080 	.word	0x20000080
 8001218:	20000070 	.word	0x20000070
 800121c:	20000084 	.word	0x20000084
 8001220:	20000074 	.word	0x20000074
 8001224:	40011000 	.word	0x40011000
 8001228:	2000009c 	.word	0x2000009c
 800122c:	200000a0 	.word	0x200000a0

08001230 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
  LL_TIM_ClearFlag_CC1(TIM1);
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <TIM1_CC_IRQHandler+0x18>)
 8001236:	f7ff fe00 	bl	8000e3a <LL_TIM_ClearFlag_CC1>
  LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 800123a:	2101      	movs	r1, #1
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <TIM1_CC_IRQHandler+0x18>)
 800123e:	f7ff fdde 	bl	8000dfe <LL_TIM_CC_DisableChannel>

  /* USER CODE END TIM1_CC_IRQn 0 */
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40012c00 	.word	0x40012c00

0800124c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db0b      	blt.n	800129e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	4906      	ldr	r1, [pc, #24]	; (80012a8 <__NVIC_EnableIRQ+0x34>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f202 	lsl.w	r2, r0, r2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	e000e100 	.word	0xe000e100

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db0a      	blt.n	80012d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	490c      	ldr	r1, [pc, #48]	; (80012f8 <__NVIC_SetPriority+0x4c>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d4:	e00a      	b.n	80012ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4908      	ldr	r1, [pc, #32]	; (80012fc <__NVIC_SetPriority+0x50>)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	3b04      	subs	r3, #4
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	761a      	strb	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2b04      	cmp	r3, #4
 800131c:	bf28      	it	cs
 800131e:	2304      	movcs	r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	2b06      	cmp	r3, #6
 8001328:	d902      	bls.n	8001330 <NVIC_EncodePriority+0x30>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b03      	subs	r3, #3
 800132e:	e000      	b.n	8001332 <NVIC_EncodePriority+0x32>
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001348:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	4313      	orrs	r3, r2
         );
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <LL_TIM_SetOnePulseMode>:
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 0208 	bic.w	r2, r3, #8
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <LL_TIM_DisableARRPreload>:
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	601a      	str	r2, [r3, #0]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
	...

080013a8 <LL_TIM_OC_EnableFast>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d01c      	beq.n	80013f2 <LL_TIM_OC_EnableFast+0x4a>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d017      	beq.n	80013ee <LL_TIM_OC_EnableFast+0x46>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2b10      	cmp	r3, #16
 80013c2:	d012      	beq.n	80013ea <LL_TIM_OC_EnableFast+0x42>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	2b40      	cmp	r3, #64	; 0x40
 80013c8:	d00d      	beq.n	80013e6 <LL_TIM_OC_EnableFast+0x3e>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013d0:	d007      	beq.n	80013e2 <LL_TIM_OC_EnableFast+0x3a>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d8:	d101      	bne.n	80013de <LL_TIM_OC_EnableFast+0x36>
 80013da:	2305      	movs	r3, #5
 80013dc:	e00a      	b.n	80013f4 <LL_TIM_OC_EnableFast+0x4c>
 80013de:	2306      	movs	r3, #6
 80013e0:	e008      	b.n	80013f4 <LL_TIM_OC_EnableFast+0x4c>
 80013e2:	2304      	movs	r3, #4
 80013e4:	e006      	b.n	80013f4 <LL_TIM_OC_EnableFast+0x4c>
 80013e6:	2303      	movs	r3, #3
 80013e8:	e004      	b.n	80013f4 <LL_TIM_OC_EnableFast+0x4c>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e002      	b.n	80013f4 <LL_TIM_OC_EnableFast+0x4c>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <LL_TIM_OC_EnableFast+0x4c>
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3318      	adds	r3, #24
 80013fa:	4619      	mov	r1, r3
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <LL_TIM_OC_EnableFast+0x80>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	440b      	add	r3, r1
 8001404:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <LL_TIM_OC_EnableFast+0x84>)
 800140e:	5ccb      	ldrb	r3, [r1, r3]
 8001410:	4619      	mov	r1, r3
 8001412:	2304      	movs	r3, #4
 8001414:	408b      	lsls	r3, r1
 8001416:	431a      	orrs	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	080039c4 	.word	0x080039c4
 800142c:	080039cc 	.word	0x080039cc

08001430 <LL_TIM_OC_EnablePreload>:
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d01c      	beq.n	800147a <LL_TIM_OC_EnablePreload+0x4a>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2b04      	cmp	r3, #4
 8001444:	d017      	beq.n	8001476 <LL_TIM_OC_EnablePreload+0x46>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2b10      	cmp	r3, #16
 800144a:	d012      	beq.n	8001472 <LL_TIM_OC_EnablePreload+0x42>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2b40      	cmp	r3, #64	; 0x40
 8001450:	d00d      	beq.n	800146e <LL_TIM_OC_EnablePreload+0x3e>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001458:	d007      	beq.n	800146a <LL_TIM_OC_EnablePreload+0x3a>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001460:	d101      	bne.n	8001466 <LL_TIM_OC_EnablePreload+0x36>
 8001462:	2305      	movs	r3, #5
 8001464:	e00a      	b.n	800147c <LL_TIM_OC_EnablePreload+0x4c>
 8001466:	2306      	movs	r3, #6
 8001468:	e008      	b.n	800147c <LL_TIM_OC_EnablePreload+0x4c>
 800146a:	2304      	movs	r3, #4
 800146c:	e006      	b.n	800147c <LL_TIM_OC_EnablePreload+0x4c>
 800146e:	2303      	movs	r3, #3
 8001470:	e004      	b.n	800147c <LL_TIM_OC_EnablePreload+0x4c>
 8001472:	2302      	movs	r3, #2
 8001474:	e002      	b.n	800147c <LL_TIM_OC_EnablePreload+0x4c>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <LL_TIM_OC_EnablePreload+0x4c>
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3318      	adds	r3, #24
 8001482:	4619      	mov	r1, r3
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <LL_TIM_OC_EnablePreload+0x80>)
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	440b      	add	r3, r1
 800148c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	4907      	ldr	r1, [pc, #28]	; (80014b4 <LL_TIM_OC_EnablePreload+0x84>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	4619      	mov	r1, r3
 800149a:	2308      	movs	r3, #8
 800149c:	408b      	lsls	r3, r1
 800149e:	431a      	orrs	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	080039c4 	.word	0x080039c4
 80014b4:	080039cc 	.word	0x080039cc

080014b8 <LL_TIM_OC_DisablePreload>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d01c      	beq.n	8001502 <LL_TIM_OC_DisablePreload+0x4a>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d017      	beq.n	80014fe <LL_TIM_OC_DisablePreload+0x46>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2b10      	cmp	r3, #16
 80014d2:	d012      	beq.n	80014fa <LL_TIM_OC_DisablePreload+0x42>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b40      	cmp	r3, #64	; 0x40
 80014d8:	d00d      	beq.n	80014f6 <LL_TIM_OC_DisablePreload+0x3e>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014e0:	d007      	beq.n	80014f2 <LL_TIM_OC_DisablePreload+0x3a>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e8:	d101      	bne.n	80014ee <LL_TIM_OC_DisablePreload+0x36>
 80014ea:	2305      	movs	r3, #5
 80014ec:	e00a      	b.n	8001504 <LL_TIM_OC_DisablePreload+0x4c>
 80014ee:	2306      	movs	r3, #6
 80014f0:	e008      	b.n	8001504 <LL_TIM_OC_DisablePreload+0x4c>
 80014f2:	2304      	movs	r3, #4
 80014f4:	e006      	b.n	8001504 <LL_TIM_OC_DisablePreload+0x4c>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e004      	b.n	8001504 <LL_TIM_OC_DisablePreload+0x4c>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e002      	b.n	8001504 <LL_TIM_OC_DisablePreload+0x4c>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_TIM_OC_DisablePreload+0x4c>
 8001502:	2300      	movs	r3, #0
 8001504:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3318      	adds	r3, #24
 800150a:	4619      	mov	r1, r3
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <LL_TIM_OC_DisablePreload+0x80>)
 8001510:	5cd3      	ldrb	r3, [r2, r3]
 8001512:	440b      	add	r3, r1
 8001514:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	4907      	ldr	r1, [pc, #28]	; (800153c <LL_TIM_OC_DisablePreload+0x84>)
 800151e:	5ccb      	ldrb	r3, [r1, r3]
 8001520:	4619      	mov	r1, r3
 8001522:	2308      	movs	r3, #8
 8001524:	408b      	lsls	r3, r1
 8001526:	43db      	mvns	r3, r3
 8001528:	401a      	ands	r2, r3
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	601a      	str	r2, [r3, #0]
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	080039c4 	.word	0x080039c4
 800153c:	080039cc 	.word	0x080039cc

08001540 <LL_TIM_SetTriggerOutput>:
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	605a      	str	r2, [r3, #4]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <LL_TIM_DisableMasterSlaveMode>:
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	609a      	str	r2, [r3, #8]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
	...

08001584 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800158e:	699a      	ldr	r2, [r3, #24]
 8001590:	4907      	ldr	r1, [pc, #28]	; (80015b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4313      	orrs	r3, r2
 8001596:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800159a:	699a      	ldr	r2, [r3, #24]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4013      	ands	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b098      	sub	sp, #96	; 0x60
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80015ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80015ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ce:	2220      	movs	r2, #32
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 f9bc 	bl	8003950 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	463b      	mov	r3, r7
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80015f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015fc:	f7ff ffc2 	bl	8001584 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001600:	f7ff fe2a 	bl	8001258 <__NVIC_GetPriorityGrouping>
 8001604:	4603      	mov	r3, r0
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fe78 	bl	8001300 <NVIC_EncodePriority>
 8001610:	4603      	mov	r3, r0
 8001612:	4619      	mov	r1, r3
 8001614:	201b      	movs	r0, #27
 8001616:	f7ff fe49 	bl	80012ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_CC_IRQn);
 800161a:	201b      	movs	r0, #27
 800161c:	f7ff fe2a 	bl	8001274 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 719;
 8001620:	f240 23cf 	movw	r3, #719	; 0x2cf
 8001624:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001628:	2300      	movs	r3, #0
 800162a:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 65535;
 800162c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001630:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	65fb      	str	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800163a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800163e:	4619      	mov	r1, r3
 8001640:	482e      	ldr	r0, [pc, #184]	; (80016fc <MX_TIM1_Init+0x148>)
 8001642:	f001 feed 	bl	8003420 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001646:	482d      	ldr	r0, [pc, #180]	; (80016fc <MX_TIM1_Init+0x148>)
 8001648:	f7ff fe9e 	bl	8001388 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800164c:	2101      	movs	r1, #1
 800164e:	482b      	ldr	r0, [pc, #172]	; (80016fc <MX_TIM1_Init+0x148>)
 8001650:	f7ff feee 	bl	8001430 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001654:	2360      	movs	r3, #96	; 0x60
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001664:	2300      	movs	r3, #0
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001668:	2300      	movs	r3, #0
 800166a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001678:	461a      	mov	r2, r3
 800167a:	2101      	movs	r1, #1
 800167c:	481f      	ldr	r0, [pc, #124]	; (80016fc <MX_TIM1_Init+0x148>)
 800167e:	f001 ff2d 	bl	80034dc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001682:	2101      	movs	r1, #1
 8001684:	481d      	ldr	r0, [pc, #116]	; (80016fc <MX_TIM1_Init+0x148>)
 8001686:	f7ff fe8f 	bl	80013a8 <LL_TIM_OC_EnableFast>
  LL_TIM_SetOnePulseMode(TIM1, LL_TIM_ONEPULSEMODE_SINGLE);
 800168a:	2108      	movs	r1, #8
 800168c:	481b      	ldr	r0, [pc, #108]	; (80016fc <MX_TIM1_Init+0x148>)
 800168e:	f7ff fe69 	bl	8001364 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001692:	2100      	movs	r1, #0
 8001694:	4819      	ldr	r0, [pc, #100]	; (80016fc <MX_TIM1_Init+0x148>)
 8001696:	f7ff ff53 	bl	8001540 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800169a:	4818      	ldr	r0, [pc, #96]	; (80016fc <MX_TIM1_Init+0x148>)
 800169c:	f7ff ff62 	bl	8001564 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 80016a0:	2101      	movs	r1, #1
 80016a2:	4816      	ldr	r0, [pc, #88]	; (80016fc <MX_TIM1_Init+0x148>)
 80016a4:	f7ff ff08 	bl	80014b8 <LL_TIM_OC_DisablePreload>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80016be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	480b      	ldr	r0, [pc, #44]	; (80016fc <MX_TIM1_Init+0x148>)
 80016d0:	f001 ff45 	bl	800355e <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80016d4:	2004      	movs	r0, #4
 80016d6:	f7ff ff55 	bl	8001584 <LL_APB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_TIM1_Init+0x14c>)
 80016dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016de:	2309      	movs	r3, #9
 80016e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	463b      	mov	r3, r7
 80016ec:	4619      	mov	r1, r3
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_TIM1_Init+0x150>)
 80016f0:	f001 fdc6 	bl	8003280 <LL_GPIO_Init>

}
 80016f4:	bf00      	nop
 80016f6:	3760      	adds	r7, #96	; 0x60
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40012c00 	.word	0x40012c00
 8001700:	04010001 	.word	0x04010001
 8001704:	40010800 	.word	0x40010800

08001708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800170a:	490d      	ldr	r1, [pc, #52]	; (8001740 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001710:	e002      	b.n	8001718 <LoopCopyDataInit>

08001712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001716:	3304      	adds	r3, #4

08001718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800171c:	d3f9      	bcc.n	8001712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001720:	4c0a      	ldr	r4, [pc, #40]	; (800174c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001724:	e001      	b.n	800172a <LoopFillZerobss>

08001726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001728:	3204      	adds	r2, #4

0800172a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800172c:	d3fb      	bcc.n	8001726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800172e:	f7ff fd8d 	bl	800124c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001732:	f002 f8e9 	bl	8003908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001736:	f7ff f941 	bl	80009bc <main>
  bx lr
 800173a:	4770      	bx	lr
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001744:	080039dc 	.word	0x080039dc
  ldr r2, =_sbss
 8001748:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800174c:	200000b0 	.word	0x200000b0

08001750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC1_2_IRQHandler>
	...

08001754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_Init+0x28>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_Init+0x28>)
 800175e:	f043 0310 	orr.w	r3, r3, #16
 8001762:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 fd57 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176a:	200f      	movs	r0, #15
 800176c:	f000 f808 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001770:	f7ff faf4 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40022000 	.word	0x40022000

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fd61 	bl	8002266 <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017bc:	f000 fd37 	bl	800222e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000004 	.word	0x20000004
 80017d8:	2000000c 	.word	0x2000000c
 80017dc:	20000008 	.word	0x20000008

080017e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_IncTick+0x1c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_IncTick+0x20>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a03      	ldr	r2, [pc, #12]	; (8001800 <HAL_IncTick+0x20>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	2000000c 	.word	0x2000000c
 8001800:	200000ac 	.word	0x200000ac

08001804 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b02      	ldr	r3, [pc, #8]	; (8001814 <HAL_GetTick+0x10>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	200000ac 	.word	0x200000ac

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff fff0 	bl	8001804 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffe0 	bl	8001804 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000000c 	.word	0x2000000c

08001860 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0be      	b.n	8001a00 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	2b00      	cmp	r3, #0
 800188e:	d109      	bne.n	80018a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7fe ff9a 	bl	80007d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 fbc5 	bl	8002034 <ADC_ConversionStop_Disable>
 80018aa:	4603      	mov	r3, r0
 80018ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 8099 	bne.w	80019ee <HAL_ADC_Init+0x18e>
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 8095 	bne.w	80019ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018cc:	f023 0302 	bic.w	r3, r3, #2
 80018d0:	f043 0202 	orr.w	r2, r3, #2
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7b1b      	ldrb	r3, [r3, #12]
 80018e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f8:	d003      	beq.n	8001902 <HAL_ADC_Init+0xa2>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <HAL_ADC_Init+0xa8>
 8001902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001906:	e000      	b.n	800190a <HAL_ADC_Init+0xaa>
 8001908:	2300      	movs	r3, #0
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7d1b      	ldrb	r3, [r3, #20]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d119      	bne.n	800194c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7b1b      	ldrb	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	3b01      	subs	r3, #1
 8001926:	035a      	lsls	r2, r3, #13
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	e00b      	b.n	800194c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	f043 0220 	orr.w	r2, r3, #32
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	f043 0201 	orr.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	430a      	orrs	r2, r1
 800195e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_ADC_Init+0x1a8>)
 8001968:	4013      	ands	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	430b      	orrs	r3, r1
 8001972:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800197c:	d003      	beq.n	8001986 <HAL_ADC_Init+0x126>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d104      	bne.n	8001990 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	3b01      	subs	r3, #1
 800198c:	051b      	lsls	r3, r3, #20
 800198e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_ADC_Init+0x1ac>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d10b      	bne.n	80019cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019ca:	e018      	b.n	80019fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	f023 0312 	bic.w	r3, r3, #18
 80019d4:	f043 0210 	orr.w	r2, r3, #16
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	f043 0201 	orr.w	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019ec:	e007      	b.n	80019fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	f043 0210 	orr.w	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	ffe1f7fd 	.word	0xffe1f7fd
 8001a0c:	ff1f0efe 	.word	0xff1f0efe

08001a10 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_Start+0x1a>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e098      	b.n	8001b5c <HAL_ADC_Start+0x14c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 faa4 	bl	8001f80 <ADC_Enable>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 8087 	bne.w	8001b52 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a41      	ldr	r2, [pc, #260]	; (8001b64 <HAL_ADC_Start+0x154>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d105      	bne.n	8001a6e <HAL_ADC_Start+0x5e>
 8001a62:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <HAL_ADC_Start+0x158>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d115      	bne.n	8001a9a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d026      	beq.n	8001ad6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a98:	e01d      	b.n	8001ad6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a2f      	ldr	r2, [pc, #188]	; (8001b68 <HAL_ADC_Start+0x158>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d004      	beq.n	8001aba <HAL_ADC_Start+0xaa>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a2b      	ldr	r2, [pc, #172]	; (8001b64 <HAL_ADC_Start+0x154>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_ADC_Start+0xc6>
 8001aba:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_ADC_Start+0x158>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ace:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d006      	beq.n	8001af0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	f023 0206 	bic.w	r2, r3, #6
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aee:	e002      	b.n	8001af6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f06f 0202 	mvn.w	r2, #2
 8001b06:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b12:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b16:	d113      	bne.n	8001b40 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b1c:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <HAL_ADC_Start+0x154>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d105      	bne.n	8001b2e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_ADC_Start+0x158>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d108      	bne.n	8001b40 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	e00c      	b.n	8001b5a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	e003      	b.n	8001b5a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40012800 	.word	0x40012800
 8001b68:	40012400 	.word	0x40012400

08001b6c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b82:	f7ff fe3f 	bl	8001804 <HAL_GetTick>
 8001b86:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	f043 0220 	orr.w	r2, r3, #32
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0d3      	b.n	8001d56 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d131      	bne.n	8001c20 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d12a      	bne.n	8001c20 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bca:	e021      	b.n	8001c10 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bd2:	d01d      	beq.n	8001c10 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <HAL_ADC_PollForConversion+0x7e>
 8001bda:	f7ff fe13 	bl	8001804 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d212      	bcs.n	8001c10 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10b      	bne.n	8001c10 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	f043 0204 	orr.w	r2, r3, #4
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e0a2      	b.n	8001d56 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0d6      	beq.n	8001bcc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c1e:	e070      	b.n	8001d02 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c20:	4b4f      	ldr	r3, [pc, #316]	; (8001d60 <HAL_ADC_PollForConversion+0x1f4>)
 8001c22:	681c      	ldr	r4, [r3, #0]
 8001c24:	2002      	movs	r0, #2
 8001c26:	f001 f9b3 	bl	8002f90 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6919      	ldr	r1, [r3, #16]
 8001c36:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <HAL_ADC_PollForConversion+0x1f8>)
 8001c38:	400b      	ands	r3, r1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <HAL_ADC_PollForConversion+0x104>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68d9      	ldr	r1, [r3, #12]
 8001c44:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <HAL_ADC_PollForConversion+0x1fc>)
 8001c46:	400b      	ands	r3, r1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d111      	bne.n	8001c70 <HAL_ADC_PollForConversion+0x104>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6919      	ldr	r1, [r3, #16]
 8001c52:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <HAL_ADC_PollForConversion+0x200>)
 8001c54:	400b      	ands	r3, r1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d108      	bne.n	8001c6c <HAL_ADC_PollForConversion+0x100>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68d9      	ldr	r1, [r3, #12]
 8001c60:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_ADC_PollForConversion+0x204>)
 8001c62:	400b      	ands	r3, r1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_PollForConversion+0x100>
 8001c68:	2314      	movs	r3, #20
 8001c6a:	e020      	b.n	8001cae <HAL_ADC_PollForConversion+0x142>
 8001c6c:	2329      	movs	r3, #41	; 0x29
 8001c6e:	e01e      	b.n	8001cae <HAL_ADC_PollForConversion+0x142>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6919      	ldr	r1, [r3, #16]
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_ADC_PollForConversion+0x200>)
 8001c78:	400b      	ands	r3, r1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_ADC_PollForConversion+0x120>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68d9      	ldr	r1, [r3, #12]
 8001c84:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <HAL_ADC_PollForConversion+0x204>)
 8001c86:	400b      	ands	r3, r1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_ADC_PollForConversion+0x13c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6919      	ldr	r1, [r3, #16]
 8001c92:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <HAL_ADC_PollForConversion+0x208>)
 8001c94:	400b      	ands	r3, r1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d108      	bne.n	8001cac <HAL_ADC_PollForConversion+0x140>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68d9      	ldr	r1, [r3, #12]
 8001ca0:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <HAL_ADC_PollForConversion+0x208>)
 8001ca2:	400b      	ands	r3, r1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_ADC_PollForConversion+0x140>
 8001ca8:	2354      	movs	r3, #84	; 0x54
 8001caa:	e000      	b.n	8001cae <HAL_ADC_PollForConversion+0x142>
 8001cac:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cb4:	e021      	b.n	8001cfa <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cbc:	d01a      	beq.n	8001cf4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_ADC_PollForConversion+0x168>
 8001cc4:	f7ff fd9e 	bl	8001804 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d20f      	bcs.n	8001cf4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d90b      	bls.n	8001cf4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	f043 0204 	orr.w	r2, r3, #4
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e030      	b.n	8001d56 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d8d9      	bhi.n	8001cb6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f06f 0212 	mvn.w	r2, #18
 8001d0a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d22:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d26:	d115      	bne.n	8001d54 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d111      	bne.n	8001d54 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd90      	pop	{r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000004 	.word	0x20000004
 8001d64:	24924924 	.word	0x24924924
 8001d68:	00924924 	.word	0x00924924
 8001d6c:	12492492 	.word	0x12492492
 8001d70:	00492492 	.word	0x00492492
 8001d74:	00249249 	.word	0x00249249

08001d78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x20>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e0dc      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x1da>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b06      	cmp	r3, #6
 8001dbe:	d81c      	bhi.n	8001dfa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b05      	subs	r3, #5
 8001dd2:	221f      	movs	r2, #31
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4019      	ands	r1, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	3b05      	subs	r3, #5
 8001dec:	fa00 f203 	lsl.w	r2, r0, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	635a      	str	r2, [r3, #52]	; 0x34
 8001df8:	e03c      	b.n	8001e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d81c      	bhi.n	8001e3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	3b23      	subs	r3, #35	; 0x23
 8001e14:	221f      	movs	r2, #31
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	4019      	ands	r1, r3
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b23      	subs	r3, #35	; 0x23
 8001e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	631a      	str	r2, [r3, #48]	; 0x30
 8001e3a:	e01b      	b.n	8001e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3b41      	subs	r3, #65	; 0x41
 8001e4e:	221f      	movs	r2, #31
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	4019      	ands	r1, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b41      	subs	r3, #65	; 0x41
 8001e68:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b09      	cmp	r3, #9
 8001e7a:	d91c      	bls.n	8001eb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68d9      	ldr	r1, [r3, #12]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b1e      	subs	r3, #30
 8001e8e:	2207      	movs	r2, #7
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4019      	ands	r1, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6898      	ldr	r0, [r3, #8]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b1e      	subs	r3, #30
 8001ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	e019      	b.n	8001eea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6919      	ldr	r1, [r3, #16]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4019      	ands	r1, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d003      	beq.n	8001efa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ef6:	2b11      	cmp	r3, #17
 8001ef8:	d132      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d125      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d126      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b10      	cmp	r3, #16
 8001f28:	d11a      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <HAL_ADC_ConfigChannel+0x1ec>)
 8001f30:	fba2 2303 	umull	r2, r3, r2, r3
 8001f34:	0c9a      	lsrs	r2, r3, #18
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f40:	e002      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f9      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x1b2>
 8001f4e:	e007      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40012400 	.word	0x40012400
 8001f78:	20000004 	.word	0x20000004
 8001f7c:	431bde83 	.word	0x431bde83

08001f80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d040      	beq.n	8002020 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0201 	orr.w	r2, r2, #1
 8001fac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <ADC_Enable+0xac>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <ADC_Enable+0xb0>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	0c9b      	lsrs	r3, r3, #18
 8001fba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fbc:	e002      	b.n	8001fc4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f9      	bne.n	8001fbe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fca:	f7ff fc1b 	bl	8001804 <HAL_GetTick>
 8001fce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fd0:	e01f      	b.n	8002012 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fd2:	f7ff fc17 	bl	8001804 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d918      	bls.n	8002012 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d011      	beq.n	8002012 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	f043 0210 	orr.w	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e007      	b.n	8002022 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d1d8      	bne.n	8001fd2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000004 	.word	0x20000004
 8002030:	431bde83 	.word	0x431bde83

08002034 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b01      	cmp	r3, #1
 800204c:	d12e      	bne.n	80020ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0201 	bic.w	r2, r2, #1
 800205c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800205e:	f7ff fbd1 	bl	8001804 <HAL_GetTick>
 8002062:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002064:	e01b      	b.n	800209e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002066:	f7ff fbcd 	bl	8001804 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d914      	bls.n	800209e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	d10d      	bne.n	800209e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	f043 0210 	orr.w	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002092:	f043 0201 	orr.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e007      	b.n	80020ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d0dc      	beq.n	8002066 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <__NVIC_SetPriorityGrouping>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d4:	4013      	ands	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ea:	4a04      	ldr	r2, [pc, #16]	; (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	60d3      	str	r3, [r2, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_GetPriorityGrouping>:
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <__NVIC_GetPriorityGrouping+0x18>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	f003 0307 	and.w	r3, r3, #7
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_SetPriority>:
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	; (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	; (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021f8:	f7ff ff90 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff49 	bl	80020b8 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff5e 	bl	8002100 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff90 	bl	8002170 <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5f 	bl	800211c <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffb0 	bl	80021d4 <SysTick_Config>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b08b      	sub	sp, #44	; 0x2c
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002292:	e169      	b.n	8002568 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002294:	2201      	movs	r2, #1
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	f040 8158 	bne.w	8002562 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a9a      	ldr	r2, [pc, #616]	; (8002520 <HAL_GPIO_Init+0x2a0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d05e      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022bc:	4a98      	ldr	r2, [pc, #608]	; (8002520 <HAL_GPIO_Init+0x2a0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d875      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022c2:	4a98      	ldr	r2, [pc, #608]	; (8002524 <HAL_GPIO_Init+0x2a4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d058      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022c8:	4a96      	ldr	r2, [pc, #600]	; (8002524 <HAL_GPIO_Init+0x2a4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d86f      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022ce:	4a96      	ldr	r2, [pc, #600]	; (8002528 <HAL_GPIO_Init+0x2a8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d052      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022d4:	4a94      	ldr	r2, [pc, #592]	; (8002528 <HAL_GPIO_Init+0x2a8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d869      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022da:	4a94      	ldr	r2, [pc, #592]	; (800252c <HAL_GPIO_Init+0x2ac>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d04c      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022e0:	4a92      	ldr	r2, [pc, #584]	; (800252c <HAL_GPIO_Init+0x2ac>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d863      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022e6:	4a92      	ldr	r2, [pc, #584]	; (8002530 <HAL_GPIO_Init+0x2b0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d046      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022ec:	4a90      	ldr	r2, [pc, #576]	; (8002530 <HAL_GPIO_Init+0x2b0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d85d      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022f2:	2b12      	cmp	r3, #18
 80022f4:	d82a      	bhi.n	800234c <HAL_GPIO_Init+0xcc>
 80022f6:	2b12      	cmp	r3, #18
 80022f8:	d859      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022fa:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <HAL_GPIO_Init+0x80>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	0800237b 	.word	0x0800237b
 8002304:	08002355 	.word	0x08002355
 8002308:	08002367 	.word	0x08002367
 800230c:	080023a9 	.word	0x080023a9
 8002310:	080023af 	.word	0x080023af
 8002314:	080023af 	.word	0x080023af
 8002318:	080023af 	.word	0x080023af
 800231c:	080023af 	.word	0x080023af
 8002320:	080023af 	.word	0x080023af
 8002324:	080023af 	.word	0x080023af
 8002328:	080023af 	.word	0x080023af
 800232c:	080023af 	.word	0x080023af
 8002330:	080023af 	.word	0x080023af
 8002334:	080023af 	.word	0x080023af
 8002338:	080023af 	.word	0x080023af
 800233c:	080023af 	.word	0x080023af
 8002340:	080023af 	.word	0x080023af
 8002344:	0800235d 	.word	0x0800235d
 8002348:	08002371 	.word	0x08002371
 800234c:	4a79      	ldr	r2, [pc, #484]	; (8002534 <HAL_GPIO_Init+0x2b4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002352:	e02c      	b.n	80023ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	623b      	str	r3, [r7, #32]
          break;
 800235a:	e029      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	3304      	adds	r3, #4
 8002362:	623b      	str	r3, [r7, #32]
          break;
 8002364:	e024      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	3308      	adds	r3, #8
 800236c:	623b      	str	r3, [r7, #32]
          break;
 800236e:	e01f      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	330c      	adds	r3, #12
 8002376:	623b      	str	r3, [r7, #32]
          break;
 8002378:	e01a      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002382:	2304      	movs	r3, #4
 8002384:	623b      	str	r3, [r7, #32]
          break;
 8002386:	e013      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002390:	2308      	movs	r3, #8
 8002392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	611a      	str	r2, [r3, #16]
          break;
 800239a:	e009      	b.n	80023b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800239c:	2308      	movs	r3, #8
 800239e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	615a      	str	r2, [r3, #20]
          break;
 80023a6:	e003      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
          break;
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          break;
 80023ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2bff      	cmp	r3, #255	; 0xff
 80023b4:	d801      	bhi.n	80023ba <HAL_GPIO_Init+0x13a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	e001      	b.n	80023be <HAL_GPIO_Init+0x13e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2bff      	cmp	r3, #255	; 0xff
 80023c4:	d802      	bhi.n	80023cc <HAL_GPIO_Init+0x14c>
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	e002      	b.n	80023d2 <HAL_GPIO_Init+0x152>
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	3b08      	subs	r3, #8
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	210f      	movs	r1, #15
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	6a39      	ldr	r1, [r7, #32]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 80b1 	beq.w	8002562 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002400:	4b4d      	ldr	r3, [pc, #308]	; (8002538 <HAL_GPIO_Init+0x2b8>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a4c      	ldr	r2, [pc, #304]	; (8002538 <HAL_GPIO_Init+0x2b8>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <HAL_GPIO_Init+0x2b8>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002418:	4a48      	ldr	r2, [pc, #288]	; (800253c <HAL_GPIO_Init+0x2bc>)
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a40      	ldr	r2, [pc, #256]	; (8002540 <HAL_GPIO_Init+0x2c0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d013      	beq.n	800246c <HAL_GPIO_Init+0x1ec>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a3f      	ldr	r2, [pc, #252]	; (8002544 <HAL_GPIO_Init+0x2c4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00d      	beq.n	8002468 <HAL_GPIO_Init+0x1e8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a3e      	ldr	r2, [pc, #248]	; (8002548 <HAL_GPIO_Init+0x2c8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d007      	beq.n	8002464 <HAL_GPIO_Init+0x1e4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a3d      	ldr	r2, [pc, #244]	; (800254c <HAL_GPIO_Init+0x2cc>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d101      	bne.n	8002460 <HAL_GPIO_Init+0x1e0>
 800245c:	2303      	movs	r3, #3
 800245e:	e006      	b.n	800246e <HAL_GPIO_Init+0x1ee>
 8002460:	2304      	movs	r3, #4
 8002462:	e004      	b.n	800246e <HAL_GPIO_Init+0x1ee>
 8002464:	2302      	movs	r3, #2
 8002466:	e002      	b.n	800246e <HAL_GPIO_Init+0x1ee>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_GPIO_Init+0x1ee>
 800246c:	2300      	movs	r3, #0
 800246e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002470:	f002 0203 	and.w	r2, r2, #3
 8002474:	0092      	lsls	r2, r2, #2
 8002476:	4093      	lsls	r3, r2
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800247e:	492f      	ldr	r1, [pc, #188]	; (800253c <HAL_GPIO_Init+0x2bc>)
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d006      	beq.n	80024a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	492c      	ldr	r1, [pc, #176]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024a6:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	4928      	ldr	r1, [pc, #160]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d006      	beq.n	80024ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024c0:	4b23      	ldr	r3, [pc, #140]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	4922      	ldr	r1, [pc, #136]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
 80024cc:	e006      	b.n	80024dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	491e      	ldr	r1, [pc, #120]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024d8:	4013      	ands	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	4918      	ldr	r1, [pc, #96]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]
 80024f4:	e006      	b.n	8002504 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4914      	ldr	r1, [pc, #80]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 8002500:	4013      	ands	r3, r2
 8002502:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d021      	beq.n	8002554 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	490e      	ldr	r1, [pc, #56]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	60cb      	str	r3, [r1, #12]
 800251c:	e021      	b.n	8002562 <HAL_GPIO_Init+0x2e2>
 800251e:	bf00      	nop
 8002520:	10320000 	.word	0x10320000
 8002524:	10310000 	.word	0x10310000
 8002528:	10220000 	.word	0x10220000
 800252c:	10210000 	.word	0x10210000
 8002530:	10120000 	.word	0x10120000
 8002534:	10110000 	.word	0x10110000
 8002538:	40021000 	.word	0x40021000
 800253c:	40010000 	.word	0x40010000
 8002540:	40010800 	.word	0x40010800
 8002544:	40010c00 	.word	0x40010c00
 8002548:	40011000 	.word	0x40011000
 800254c:	40011400 	.word	0x40011400
 8002550:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_GPIO_Init+0x304>)
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	43db      	mvns	r3, r3
 800255c:	4909      	ldr	r1, [pc, #36]	; (8002584 <HAL_GPIO_Init+0x304>)
 800255e:	4013      	ands	r3, r2
 8002560:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	3301      	adds	r3, #1
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	f47f ae8e 	bne.w	8002294 <HAL_GPIO_Init+0x14>
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	372c      	adds	r7, #44	; 0x2c
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	40010400 	.word	0x40010400

08002588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	887b      	ldrh	r3, [r7, #2]
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e001      	b.n	80025aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	807b      	strh	r3, [r7, #2]
 80025c2:	4613      	mov	r3, r2
 80025c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025c6:	787b      	ldrb	r3, [r7, #1]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025cc:	887a      	ldrh	r2, [r7, #2]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025d2:	e003      	b.n	80025dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	041a      	lsls	r2, r3, #16
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	611a      	str	r2, [r3, #16]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025f8:	887a      	ldrh	r2, [r7, #2]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4013      	ands	r3, r2
 80025fe:	041a      	lsls	r2, r3, #16
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43d9      	mvns	r1, r3
 8002604:	887b      	ldrh	r3, [r7, #2]
 8002606:	400b      	ands	r3, r1
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e272      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8087 	beq.w	8002746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002638:	4b92      	ldr	r3, [pc, #584]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b04      	cmp	r3, #4
 8002642:	d00c      	beq.n	800265e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002644:	4b8f      	ldr	r3, [pc, #572]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d112      	bne.n	8002676 <HAL_RCC_OscConfig+0x5e>
 8002650:	4b8c      	ldr	r3, [pc, #560]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d10b      	bne.n	8002676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265e:	4b89      	ldr	r3, [pc, #548]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d06c      	beq.n	8002744 <HAL_RCC_OscConfig+0x12c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d168      	bne.n	8002744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e24c      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x76>
 8002680:	4b80      	ldr	r3, [pc, #512]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a7f      	ldr	r2, [pc, #508]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e02e      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x98>
 8002696:	4b7b      	ldr	r3, [pc, #492]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7a      	ldr	r2, [pc, #488]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b78      	ldr	r3, [pc, #480]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a77      	ldr	r2, [pc, #476]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0xbc>
 80026ba:	4b72      	ldr	r3, [pc, #456]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a71      	ldr	r2, [pc, #452]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 80026d4:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6a      	ldr	r2, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b68      	ldr	r3, [pc, #416]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a67      	ldr	r2, [pc, #412]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff f886 	bl	8001804 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7ff f882 	bl	8001804 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e200      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xe4>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff f872 	bl	8001804 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7ff f86e 	bl	8001804 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1ec      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x10c>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d063      	beq.n	800281a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002752:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800275e:	4b49      	ldr	r3, [pc, #292]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b08      	cmp	r3, #8
 8002768:	d11c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x18c>
 800276a:	4b46      	ldr	r3, [pc, #280]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d116      	bne.n	80027a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x176>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1c0      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4939      	ldr	r1, [pc, #228]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	e03a      	b.n	800281a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ac:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_RCC_OscConfig+0x270>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7ff f827 	bl	8001804 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ba:	f7ff f823 	bl	8001804 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e1a1      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4927      	ldr	r1, [pc, #156]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCC_OscConfig+0x270>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7ff f806 	bl	8001804 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fc:	f7ff f802 	bl	8001804 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e180      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d03a      	beq.n	800289c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d019      	beq.n	8002862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <HAL_RCC_OscConfig+0x274>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002834:	f7fe ffe6 	bl	8001804 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283c:	f7fe ffe2 	bl	8001804 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e160      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800285a:	2001      	movs	r0, #1
 800285c:	f000 fac4 	bl	8002de8 <RCC_Delay>
 8002860:	e01c      	b.n	800289c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_RCC_OscConfig+0x274>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7fe ffcc 	bl	8001804 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286e:	e00f      	b.n	8002890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002870:	f7fe ffc8 	bl	8001804 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d908      	bls.n	8002890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e146      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	42420000 	.word	0x42420000
 800288c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002890:	4b92      	ldr	r3, [pc, #584]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e9      	bne.n	8002870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80a6 	beq.w	80029f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ae:	4b8b      	ldr	r3, [pc, #556]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ba:	4b88      	ldr	r3, [pc, #544]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4a87      	ldr	r2, [pc, #540]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	61d3      	str	r3, [r2, #28]
 80028c6:	4b85      	ldr	r3, [pc, #532]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b82      	ldr	r3, [pc, #520]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d118      	bne.n	8002914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e2:	4b7f      	ldr	r3, [pc, #508]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7e      	ldr	r2, [pc, #504]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7fe ff89 	bl	8001804 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7fe ff85 	bl	8001804 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	; 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e103      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b75      	ldr	r3, [pc, #468]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x312>
 800291c:	4b6f      	ldr	r3, [pc, #444]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a6e      	ldr	r2, [pc, #440]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6213      	str	r3, [r2, #32]
 8002928:	e02d      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x334>
 8002932:	4b6a      	ldr	r3, [pc, #424]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a69      	ldr	r2, [pc, #420]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	4b67      	ldr	r3, [pc, #412]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a66      	ldr	r2, [pc, #408]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6213      	str	r3, [r2, #32]
 800294a:	e01c      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b05      	cmp	r3, #5
 8002952:	d10c      	bne.n	800296e <HAL_RCC_OscConfig+0x356>
 8002954:	4b61      	ldr	r3, [pc, #388]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4a60      	ldr	r2, [pc, #384]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6213      	str	r3, [r2, #32]
 8002960:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a5d      	ldr	r2, [pc, #372]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	e00b      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800296e:	4b5b      	ldr	r3, [pc, #364]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a5a      	ldr	r2, [pc, #360]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6213      	str	r3, [r2, #32]
 800297a:	4b58      	ldr	r3, [pc, #352]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a57      	ldr	r2, [pc, #348]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d015      	beq.n	80029ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7fe ff39 	bl	8001804 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	e00a      	b.n	80029ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fe ff35 	bl	8001804 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e0b1      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0ee      	beq.n	8002996 <HAL_RCC_OscConfig+0x37e>
 80029b8:	e014      	b.n	80029e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7fe ff23 	bl	8001804 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe ff1f 	bl	8001804 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e09b      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d8:	4b40      	ldr	r3, [pc, #256]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ee      	bne.n	80029c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d105      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ea:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4a3b      	ldr	r2, [pc, #236]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8087 	beq.w	8002b0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a00:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d061      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d146      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a14:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <HAL_RCC_OscConfig+0x4cc>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fef3 	bl	8001804 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe feef 	bl	8001804 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e06d      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a48:	d108      	bne.n	8002a5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	4921      	ldr	r1, [pc, #132]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5c:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a19      	ldr	r1, [r3, #32]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	491b      	ldr	r1, [pc, #108]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x4cc>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fec3 	bl	8001804 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a82:	f7fe febf 	bl	8001804 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e03d      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x46a>
 8002aa0:	e035      	b.n	8002b0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <HAL_RCC_OscConfig+0x4cc>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe feac 	bl	8001804 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fea8 	bl	8001804 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e026      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x498>
 8002ace:	e01e      	b.n	8002b0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e019      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_OscConfig+0x500>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000

08002b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0d0      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b30:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d910      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b67      	ldr	r3, [pc, #412]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 0207 	bic.w	r2, r3, #7
 8002b46:	4965      	ldr	r1, [pc, #404]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b63      	ldr	r3, [pc, #396]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0b8      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b78:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a52      	ldr	r2, [pc, #328]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	494d      	ldr	r1, [pc, #308]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d040      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d115      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e073      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06b      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4936      	ldr	r1, [pc, #216]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c0c:	f7fe fdfa 	bl	8001804 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7fe fdf6 	bl	8001804 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e053      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 020c 	and.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1eb      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d210      	bcs.n	8002c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0207 	bic.w	r2, r3, #7
 8002c52:	4922      	ldr	r1, [pc, #136]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e032      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4916      	ldr	r1, [pc, #88]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002caa:	f000 f821 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	490a      	ldr	r1, [pc, #40]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_RCC_ClockConfig+0x1d0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fd58 	bl	8001780 <HAL_InitTick>

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40022000 	.word	0x40022000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	080039ac 	.word	0x080039ac
 8002ce8:	20000004 	.word	0x20000004
 8002cec:	20000008 	.word	0x20000008

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	b490      	push	{r4, r7}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cf6:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xac>)
 8002cf8:	1d3c      	adds	r4, r7, #4
 8002cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d00:	f240 2301 	movw	r3, #513	; 0x201
 8002d04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d1a:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d002      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x40>
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d003      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x46>
 8002d2e:	e02b      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d32:	623b      	str	r3, [r7, #32]
      break;
 8002d34:	e02b      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	0c9b      	lsrs	r3, r3, #18
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3328      	adds	r3, #40	; 0x28
 8002d40:	443b      	add	r3, r7
 8002d42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d46:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d012      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d52:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0c5b      	lsrs	r3, r3, #17
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	3328      	adds	r3, #40	; 0x28
 8002d5e:	443b      	add	r3, r7
 8002d60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d6a:	fb03 f202 	mul.w	r2, r3, r2
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	e004      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	4a0b      	ldr	r2, [pc, #44]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	623b      	str	r3, [r7, #32]
      break;
 8002d86:	e002      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d8a:	623b      	str	r3, [r7, #32]
      break;
 8002d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3728      	adds	r7, #40	; 0x28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc90      	pop	{r4, r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	08003978 	.word	0x08003978
 8002da0:	40021000 	.word	0x40021000
 8002da4:	007a1200 	.word	0x007a1200
 8002da8:	003d0900 	.word	0x003d0900

08002dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db0:	4b02      	ldr	r3, [pc, #8]	; (8002dbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	20000004 	.word	0x20000004

08002dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dc4:	f7ff fff2 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	0adb      	lsrs	r3, r3, #11
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4903      	ldr	r1, [pc, #12]	; (8002de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	080039bc 	.word	0x080039bc

08002de8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <RCC_Delay+0x34>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <RCC_Delay+0x38>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	0a5b      	lsrs	r3, r3, #9
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e04:	bf00      	nop
  }
  while (Delay --);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1e5a      	subs	r2, r3, #1
 8002e0a:	60fa      	str	r2, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f9      	bne.n	8002e04 <RCC_Delay+0x1c>
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	20000004 	.word	0x20000004
 8002e20:	10624dd3 	.word	0x10624dd3

08002e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d07d      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e40:	2300      	movs	r3, #0
 8002e42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e44:	4b4f      	ldr	r3, [pc, #316]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10d      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e50:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	4a4b      	ldr	r2, [pc, #300]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	61d3      	str	r3, [r2, #28]
 8002e5c:	4b49      	ldr	r3, [pc, #292]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	4b46      	ldr	r3, [pc, #280]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d118      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e78:	4b43      	ldr	r3, [pc, #268]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a42      	ldr	r2, [pc, #264]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e84:	f7fe fcbe 	bl	8001804 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8a:	e008      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8c:	f7fe fcba 	bl	8001804 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e06d      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	4b3a      	ldr	r3, [pc, #232]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eaa:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d02e      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d027      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ed2:	4b2e      	ldr	r3, [pc, #184]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed8:	4b2c      	ldr	r3, [pc, #176]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ede:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d014      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7fe fc89 	bl	8001804 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef6:	f7fe fc85 	bl	8001804 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e036      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ee      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4917      	ldr	r1, [pc, #92]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f48:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	490b      	ldr	r1, [pc, #44]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f66:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4904      	ldr	r1, [pc, #16]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40007000 	.word	0x40007000
 8002f8c:	42420440 	.word	0x42420440

08002f90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b08d      	sub	sp, #52	; 0x34
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f98:	4b58      	ldr	r3, [pc, #352]	; (80030fc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002f9a:	f107 040c 	add.w	r4, r7, #12
 8002f9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fa4:	f240 2301 	movw	r3, #513	; 0x201
 8002fa8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
 8002fae:	2300      	movs	r3, #0
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b10      	cmp	r3, #16
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	f200 808e 	bhi.w	80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d049      	beq.n	8003066 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d079      	beq.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002fd8:	e086      	b.n	80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002fda:	4b49      	ldr	r3, [pc, #292]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002fe0:	4b47      	ldr	r3, [pc, #284]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d07f      	beq.n	80030ec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	0c9b      	lsrs	r3, r3, #18
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	3330      	adds	r3, #48	; 0x30
 8002ff6:	443b      	add	r3, r7
 8002ff8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ffc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d017      	beq.n	8003038 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003008:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	0c5b      	lsrs	r3, r3, #17
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	3330      	adds	r3, #48	; 0x30
 8003014:	443b      	add	r3, r7
 8003016:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00d      	beq.n	8003042 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003026:	4a37      	ldr	r2, [pc, #220]	; (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	fbb2 f2f3 	udiv	r2, r2, r3
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003036:	e004      	b.n	8003042 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	4a33      	ldr	r2, [pc, #204]	; (8003108 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800303c:	fb02 f303 	mul.w	r3, r2, r3
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003042:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304e:	d102      	bne.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003054:	e04a      	b.n	80030ec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4a2c      	ldr	r2, [pc, #176]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	085b      	lsrs	r3, r3, #1
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003064:	e042      	b.n	80030ec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003066:	4b26      	ldr	r3, [pc, #152]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003076:	d108      	bne.n	800308a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
 8003088:	e01f      	b.n	80030ca <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003094:	d109      	bne.n	80030aa <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80030a2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a8:	e00f      	b.n	80030ca <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030b4:	d11c      	bne.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80030c2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030c8:	e012      	b.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80030ca:	e011      	b.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030cc:	f7ff fe78 	bl	8002dc0 <HAL_RCC_GetPCLK2Freq>
 80030d0:	4602      	mov	r2, r0
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	0b9b      	lsrs	r3, r3, #14
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	3301      	adds	r3, #1
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030e6:	e004      	b.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030e8:	bf00      	nop
 80030ea:	e002      	b.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030ec:	bf00      	nop
 80030ee:	e000      	b.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030f0:	bf00      	nop
    }
  }
  return (frequency);
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3734      	adds	r7, #52	; 0x34
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd90      	pop	{r4, r7, pc}
 80030fc:	08003988 	.word	0x08003988
 8003100:	40021000 	.word	0x40021000
 8003104:	007a1200 	.word	0x007a1200
 8003108:	003d0900 	.word	0x003d0900
 800310c:	aaaaaaab 	.word	0xaaaaaaab

08003110 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003110:	b490      	push	{r4, r7}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	461a      	mov	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	0e1b      	lsrs	r3, r3, #24
 8003124:	4413      	add	r3, r2
 8003126:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003128:	6822      	ldr	r2, [r4, #0]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	fa93 f3a3 	rbit	r3, r3
 8003134:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	fab3 f383 	clz	r3, r3
 800313c:	b2db      	uxtb	r3, r3
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	210f      	movs	r1, #15
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	401a      	ands	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	61bb      	str	r3, [r7, #24]
  return result;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	4313      	orrs	r3, r2
 8003168:	6023      	str	r3, [r4, #0]
}
 800316a:	bf00      	nop
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bc90      	pop	{r4, r7}
 8003172:	4770      	bx	lr

08003174 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003174:	b490      	push	{r4, r7}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	461a      	mov	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	0e1b      	lsrs	r3, r3, #24
 8003188:	4413      	add	r3, r2
 800318a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800318c:	6822      	ldr	r2, [r4, #0]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	613b      	str	r3, [r7, #16]
  return result;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	2103      	movs	r1, #3
 80031a6:	fa01 f303 	lsl.w	r3, r1, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	401a      	ands	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	fa93 f3a3 	rbit	r3, r3
 80031b8:	61bb      	str	r3, [r7, #24]
  return result;
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	4313      	orrs	r3, r2
 80031cc:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 80031ce:	bf00      	nop
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc90      	pop	{r4, r7}
 80031d6:	4770      	bx	lr

080031d8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 80031d8:	b490      	push	{r4, r7}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	461a      	mov	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	0e1b      	lsrs	r3, r3, #24
 80031ec:	4413      	add	r3, r2
 80031ee:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80031f0:	6822      	ldr	r2, [r4, #0]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	613b      	str	r3, [r7, #16]
  return result;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	2104      	movs	r1, #4
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	401a      	ands	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	61bb      	str	r3, [r7, #24]
  return result;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	4313      	orrs	r3, r2
 8003230:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8003232:	bf00      	nop
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bc90      	pop	{r4, r7}
 800323a:	4770      	bx	lr

0800323c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	43db      	mvns	r3, r3
 8003252:	401a      	ands	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	0a1b      	lsrs	r3, r3, #8
 8003258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	613b      	str	r3, [r7, #16]
  return result;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	4619      	mov	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	408b      	lsls	r3, r1
 8003270:	431a      	orrs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	60da      	str	r2, [r3, #12]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	60fb      	str	r3, [r7, #12]
  return result;
 80032a0:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80032aa:	e044      	b.n	8003336 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80032ac:	2201      	movs	r2, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	409a      	lsls	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d03a      	beq.n	8003330 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b07      	cmp	r3, #7
 80032be:	d806      	bhi.n	80032ce <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80032c0:	f240 1201 	movw	r2, #257	; 0x101
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	e008      	b.n	80032e0 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3b08      	subs	r3, #8
 80032d2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032de:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d106      	bne.n	80032f6 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	461a      	mov	r2, r3
 80032ee:	69b9      	ldr	r1, [r7, #24]
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ffa3 	bl	800323c <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	461a      	mov	r2, r3
 80032fc:	69b9      	ldr	r1, [r7, #24]
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ff06 	bl	8003110 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d003      	beq.n	8003314 <LL_GPIO_Init+0x94>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b09      	cmp	r3, #9
 8003312:	d10d      	bne.n	8003330 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	461a      	mov	r2, r3
 800331a:	69b9      	ldr	r1, [r7, #24]
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ff29 	bl	8003174 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	461a      	mov	r2, r3
 8003328:	69b9      	ldr	r1, [r7, #24]
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff ff54 	bl	80031d8 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	3301      	adds	r3, #1
 8003334:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	fa22 f303 	lsr.w	r3, r2, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1b4      	bne.n	80032ac <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <LL_TIM_SetPrescaler>:
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <LL_TIM_SetAutoReload>:
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <LL_TIM_SetRepetitionCounter>:
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <LL_TIM_OC_SetCompareCH1>:
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <LL_TIM_OC_SetCompareCH2>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <LL_TIM_OC_SetCompareCH3>:
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <LL_TIM_OC_SetCompareCH4>:
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f043 0201 	orr.w	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	615a      	str	r2, [r3, #20]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <LL_TIM_Init+0xb0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00b      	beq.n	8003450 <LL_TIM_Init+0x30>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343e:	d007      	beq.n	8003450 <LL_TIM_Init+0x30>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a24      	ldr	r2, [pc, #144]	; (80034d4 <LL_TIM_Init+0xb4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <LL_TIM_Init+0x30>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a23      	ldr	r2, [pc, #140]	; (80034d8 <LL_TIM_Init+0xb8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d106      	bne.n	800345e <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a1b      	ldr	r2, [pc, #108]	; (80034d0 <LL_TIM_Init+0xb0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00b      	beq.n	800347e <LL_TIM_Init+0x5e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346c:	d007      	beq.n	800347e <LL_TIM_Init+0x5e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <LL_TIM_Init+0xb4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d003      	beq.n	800347e <LL_TIM_Init+0x5e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <LL_TIM_Init+0xb8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d106      	bne.n	800348c <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4619      	mov	r1, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ff64 	bl	8003366 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff51 	bl	800334c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <LL_TIM_Init+0xb0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d105      	bne.n	80034be <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	4619      	mov	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ff61 	bl	8003380 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ff9f 	bl	8003402 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800

080034dc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f2:	d027      	beq.n	8003544 <LL_TIM_OC_Init+0x68>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fa:	d82a      	bhi.n	8003552 <LL_TIM_OC_Init+0x76>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003502:	d018      	beq.n	8003536 <LL_TIM_OC_Init+0x5a>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800350a:	d822      	bhi.n	8003552 <LL_TIM_OC_Init+0x76>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d003      	beq.n	800351a <LL_TIM_OC_Init+0x3e>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b10      	cmp	r3, #16
 8003516:	d007      	beq.n	8003528 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003518:	e01b      	b.n	8003552 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f867 	bl	80035f0 <OC1Config>
 8003522:	4603      	mov	r3, r0
 8003524:	75fb      	strb	r3, [r7, #23]
      break;
 8003526:	e015      	b.n	8003554 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f8c6 	bl	80036bc <OC2Config>
 8003530:	4603      	mov	r3, r0
 8003532:	75fb      	strb	r3, [r7, #23]
      break;
 8003534:	e00e      	b.n	8003554 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f929 	bl	8003790 <OC3Config>
 800353e:	4603      	mov	r3, r0
 8003540:	75fb      	strb	r3, [r7, #23]
      break;
 8003542:	e007      	b.n	8003554 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f98c 	bl	8003864 <OC4Config>
 800354c:	4603      	mov	r3, r0
 800354e:	75fb      	strb	r3, [r7, #23]
      break;
 8003550:	e000      	b.n	8003554 <LL_TIM_OC_Init+0x78>
      break;
 8003552:	bf00      	nop
  }

  return result;
 8003554:	7dfb      	ldrb	r3, [r7, #23]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	7b12      	ldrb	r2, [r2, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	89d2      	ldrh	r2, [r2, #14]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
	...

080035f0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f023 0201 	bic.w	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f023 0202 	bic.w	r2, r3, #2
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f023 0201 	bic.w	r2, r3, #1
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <OC1Config+0xc8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d11e      	bne.n	8003690 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f023 0208 	bic.w	r2, r3, #8
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f023 0204 	bic.w	r2, r3, #4
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4619      	mov	r1, r3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fe79 	bl	800339a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40012c00 	.word	0x40012c00

080036bc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f023 0210 	bic.w	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0220 	bic.w	r2, r3, #32
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f023 0210 	bic.w	r2, r3, #16
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a1b      	ldr	r2, [pc, #108]	; (800378c <OC2Config+0xd0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d11f      	bne.n	8003764 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	019b      	lsls	r3, r3, #6
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	019b      	lsls	r3, r3, #6
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fe1c 	bl	80033b4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40012c00 	.word	0x40012c00

08003790 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0303 	bic.w	r3, r3, #3
 80037be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <OC3Config+0xd0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d11f      	bne.n	8003836 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	029b      	lsls	r3, r3, #10
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	029b      	lsls	r3, r3, #10
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	015b      	lsls	r3, r3, #5
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4619      	mov	r1, r3
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fdc0 	bl	80033ce <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40012c00 	.word	0x40012c00

08003864 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	031b      	lsls	r3, r3, #12
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	031b      	lsls	r3, r3, #12
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a0f      	ldr	r2, [pc, #60]	; (8003904 <OC4Config+0xa0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d107      	bne.n	80038dc <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	019b      	lsls	r3, r3, #6
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4619      	mov	r1, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff fd7a 	bl	80033e8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40012c00 	.word	0x40012c00

08003908 <__libc_init_array>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	2600      	movs	r6, #0
 800390c:	4d0c      	ldr	r5, [pc, #48]	; (8003940 <__libc_init_array+0x38>)
 800390e:	4c0d      	ldr	r4, [pc, #52]	; (8003944 <__libc_init_array+0x3c>)
 8003910:	1b64      	subs	r4, r4, r5
 8003912:	10a4      	asrs	r4, r4, #2
 8003914:	42a6      	cmp	r6, r4
 8003916:	d109      	bne.n	800392c <__libc_init_array+0x24>
 8003918:	f000 f822 	bl	8003960 <_init>
 800391c:	2600      	movs	r6, #0
 800391e:	4d0a      	ldr	r5, [pc, #40]	; (8003948 <__libc_init_array+0x40>)
 8003920:	4c0a      	ldr	r4, [pc, #40]	; (800394c <__libc_init_array+0x44>)
 8003922:	1b64      	subs	r4, r4, r5
 8003924:	10a4      	asrs	r4, r4, #2
 8003926:	42a6      	cmp	r6, r4
 8003928:	d105      	bne.n	8003936 <__libc_init_array+0x2e>
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003930:	4798      	blx	r3
 8003932:	3601      	adds	r6, #1
 8003934:	e7ee      	b.n	8003914 <__libc_init_array+0xc>
 8003936:	f855 3b04 	ldr.w	r3, [r5], #4
 800393a:	4798      	blx	r3
 800393c:	3601      	adds	r6, #1
 800393e:	e7f2      	b.n	8003926 <__libc_init_array+0x1e>
 8003940:	080039d4 	.word	0x080039d4
 8003944:	080039d4 	.word	0x080039d4
 8003948:	080039d4 	.word	0x080039d4
 800394c:	080039d8 	.word	0x080039d8

08003950 <memset>:
 8003950:	4603      	mov	r3, r0
 8003952:	4402      	add	r2, r0
 8003954:	4293      	cmp	r3, r2
 8003956:	d100      	bne.n	800395a <memset+0xa>
 8003958:	4770      	bx	lr
 800395a:	f803 1b01 	strb.w	r1, [r3], #1
 800395e:	e7f9      	b.n	8003954 <memset+0x4>

08003960 <_init>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr

0800396c <_fini>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr
